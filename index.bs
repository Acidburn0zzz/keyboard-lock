<h1>System Keyboard Lock</h1>

<pre class="metadata">
Shortname: systemkeylock
Level:
Group: uievents
Status: WD
TR: http://www.w3.org/TR/systemkeylock/
ED: https://github.com/w3c/systemkeylock/
Repository: garykac/system-keyboard-lock
Previous Version:
	<none>
Editor:
    Gary Kacmarcik, Google, garykac@google.com
    Jamie Walch, Google, jamiewalch@google.com
Abstract:
	This specification defines an API that allows websites to
	capture keys that are normally reserved by the underlying host
	operating system. It is intended to be used by web
	applications that provide a fullscreen immersive experience
	(like games or remote access apps).
</pre>

<pre class="link-defaults">
spec:ui-events-1; type:attribute; text:code
</pre>

<pre class="biblio">
{
	"QuartzEventServices": {
		"title": "Quartz Event Services",
		"href": "https://developer.apple.com/reference/coregraphics/1658572-quartz_event_services"
	},
	"GrabKeyboard": {
		"title": "X11 GrabKeyboard API",
		"href": "https://www.x.org/releases/X11R7.7/doc/xproto/x11protocol.html#requests:GrabKeyboard"
	},
    "LowLevelKeyboardProc": {
		"title": "LowLevelKeyboardProc documentation on MSDN",
		"href": "https://msdn.microsoft.com/en-us/library/windows/desktop/ms644985(v=vs.85).aspx"
	}
}
</pre>

<h2 id="introduction">Introduction</h2>

	Richly interactive web sites, games and remote
	desktop/application streaming experiences want to provide an
	immersive, full screen experience. To accomplish this, sites
	need access to special keys and keyboard shortcuts while they
	are in full screen mode so that they can be used for
	navigation, menus or gaming functionality. Some examples of
	the keys that may be required are Escape, Alt+Tab, Cmd+`, and
	Ctrl+N.

	By default, these keys are not available to the web application because
	they are captured by the browser or the underlying operating
	system. The System Keyboard Lock API enables websites to capture and use
	all available keys allowed by the OS.

<h2 id="API">Activating and Deactivating System Keyboard Lock</h3>

	<pre class="idl" data-highlight="webidl">
	partial interface Navigator {
		[SecureContext] void requestSystemKeyboardLock(optional sequence&lt;DOMString> keyCodes);
		[SecureContext] void cancelSystemKeyboardLock();
	};
	</pre>

	The navigator has <dfn>enable keyboard lock</dfn>, which is a
	boolean that is set to true when System Keyboard Lock is enabled.
	By default, this is set to false.

	The navigator has <dfn>reserved key codes</dfn>, which is a
	sequence of DOMStrings, each of which is a valid KeyboardEvent {{code}}
	as defined in [[UIEvents-Code]].
	By default this sequence is empty (which would capture all keys
	if <a>enable keyboard lock</a> was enabled).

	<h3 id="requestSystemKeyboardLock">requestSystemKeyboardLock</h3>

		When {{requestSystemKeyboardLock()}} is called, the user agent must
		run the following steps:

		1. Reset <a>reserved key codes</a> to be an empty sequence.

		2. If the optional {{keyCodes}} argument is present, run the
			following substeps:

			1. Copy the values from {{keyCodes}} into <a>reserved key codes</a>,
				removing any entries which are invalid (those not listed in
				[[UIEvents-Code]]) or duplicate.

		3. If <a>enable keyboard lock</a> is currently false, run the following
			substeps:

			1. Register a low level keyboard event handler. This event handler
				should have the following properties:

				* It should process keyboard events before any user agent
					keyboard shortcuts are handled.
				* Wherever possible, it should process keyboard events before
					any system keyboard shortcuts are processed.

			2. Set <a>enable keyboard lock</a> to be true.

		Note: If the user agent already has a keyboard event handler registered,
		then it can optionally extend that handler to support the system
		keyboard lock (assuming it meets the requirements mentioned above).

		Note: The exact process for registering a keyboard event handler varies
		from platform to platform.
		For examples of how to register keyboard event handlers on common
		platforms, see [[LowLevelKeyboardProc]] for Windows,
		[[QuartzEventServices]] for Mac OS X and [[GrabKeyboard]] for X Windows.

	<h3 id="cancelSystemKeyboardLock">cancelSystemKeyboardLock</h3>

		When {{cancelSystemKeyboardLock()}} is called, the user agent must
		run the following steps:

		1. If <a>enable keyboard lock</a> is true, then run the following substeps:

			1. Unregister the system keyboard event handler.

			2. Set <a>enable keyboard lock</a> to be false.

			3. Reset <a>reserved key codes</a> to be an empty sequence.

		Note: As with registering keyboard event handlers, the process for
		unregistering keyboard event handlers is also platform-specific.
		See the references listed under {{requestSystemKeyboardLock()}} for
		more details and examples.

<h2 id="handling-events">Handling Events</h2>

	<h3 id="handling-keyboard-events">Handling Keyboard Events</h3>

		In response to the user pressing a key, if a low-level keyboard handler
		is registered, it should run the following steps:

		1. Let |isJsFullscreen| be set to true if the user agent is currently in
			fullscreen mode that was initiated by Element.requestFullscreen()
			(see [[Fullscreen]]).

			Note: This can be determined by adding a tracking variable in the
				requestFullscreen() call or by checking to see if
				Document.fullscreenElement is non-null.

		2. Let |hasFocus| be set to true if the current fullscreen document or
			element has input focus.

			Note: The fullscreen element would not have focus, for example, if there
				was a system dialog being displayed with focus.

		3. If |isJsFullscreen|, |hasFocus| and <a>enable keyboard lock</a> are all set
			to true, then run the following substeps:

			1. Let |keyEvent| be the key event for the new key press.

			2. Let |code| be the value of the {{code}} attribute of |keyEvent|.

			3. If <a>reserved key codes</a> is empty or if |code| is listed in
				<a>reserved key codes</a>, then run the following substeps:

				1. If |code| is equal to "Escape", then run the following
					substeps:

					1. Optionally overlay a message on the screen telling the
						user that they can Hold the Escape key to exit from
						fullscreen.

					2. If the key is held for 2 seconds, then exit from the
						keyboard handler and pass the key on to the user agent
						for normal processing (which will exit fullscreen).

				2. Dispatch |keyEvent| to the fullsceen document or element.

		Note: It is not required that a conforming implementation be able to
		override the OS default behaviour for every key combination.
		Specifically, most OSes have a “secure attention sequence” (e.g.,
		Ctrl-Alt-Del on Windows) that applications cannot override; this
		specification does not supersede that.

<h2 id="fullscreen-considerations">Fullscreen Considerations</h2>

	There are two different types of fullscreen available in modern user agents:
	JavaScript-initiated fullscreen (via the [[Fullscreen]] API) and
	user-initiated fullscreen (when the user enters fullscreen using a keyboard
	shortcut). The user-initiated fullscreen is often referred to as "F11"
	fullscreen since that is a common key shortcut used to enter and exit
	fullscreen mode.

	F11 fullscreen and JavaScript (JS) fullscreen do not behave the same way.
	When a user enters F11 fullscreen, they can only exit it via the same
	keyboard shortcut that they used to enter it -- the exitFullscreen()
	function will not work in this case. In addition, fullscreen events that are
	normally fired for JS fullscreen are not sent for F11 fullscreen.

	Because of these differences (and because there is no standard shortcut
	for F11 fullscreen), the System Keyboard Lock API is only valid when the
	a JavaScript-initiated fullscreen is active. During F11 fullscreen, no
	System Keyboard Lock processing of keyboard events will take place.

<h2 id="mobile">Mobile Device Considerations</h2>

	Issue: What level of support do we need on mobile? Is it enough to say that
	it's a keyboard-focused API and mobile devices typically don't have
	keyboards? What does Chrome do if you activate full-screen on a mobile
	web site and hit Escape from an attached keyboard? It seems like that should
	also be supported.

<h2 id="security">Security Considerations</h2>

	Issue: How does this proposal prevent malicious sites from taking all
	key events and preventing the user from escaping?

	Issue: How could this be used (alone or in conjunction with
	other APIs) to give the user a bad experience?

<h2 id="privacy">Privacy Considerations</h2>

	Not applicable. This API does not use or reveal any personal information
	about the current user.

<h2 id="acknowledgements-contributors">Acknowledgements</h2>

	Thanks to the following people for the discussions that lead
	to the creation of this proposal:

	Jon Dahlke (Google)
